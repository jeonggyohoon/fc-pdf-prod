---
alwaysApply: true
tags: [architecture, guidelines, typescript, nextjs]
---

# PDF Page Splitter - Project Architecture

## 프로젝트 개요

**PDF Page Splitter**는 사용자가 PDF 파일을 업로드하여 각 페이지를 독립적인 PDF 파일로 분할할 수 있는 웹 애플리케이션입니다.

### 핵심 가치
- **프라이버시 보장**: 클라이언트 사이드 처리로 서버 전송 최소화
- **빠른 처리**: 로컬 처리로 즉시 결과 제공
- **간편한 사용**: 드래그 앤 드롭 인터페이스

---

## 기술 스택

### Frontend
- **Framework**: Next.js 15 (React 19)
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **PDF Processing**: pdf-lib, pdfjs-dist
- **File Handling**: file-saver, jszip

### Backend
- **Runtime**: Node.js
- **Framework**: Next.js API Routes
- **File Upload**: formidable
- **Server**: Express (optional)

---

## 프로젝트 구조

```
D:\project\PDF\
├── app/                          # Next.js App Router
│   ├── layout.tsx               # Root layout (메타데이터, 폰트)
│   ├── page.tsx                 # 메인 페이지 (업로드/뷰어/분할 뷰)
│   ├── globals.css              # 전역 스타일
│   └── api/                     # API Routes
│       ├── upload/
│       │   └── route.ts         # PDF 업로드 엔드포인트
│       └── files/
│           ├── route.ts         # 파일 목록 조회
│           └── [filename]/
│               └── route.ts     # 특정 파일 조회/삭제
│
├── components/                   # React 컴포넌트
│   ├── DragDropUpload.tsx       # 드래그 앤 드롭 업로드 UI
│   ├── FileList.tsx             # 업로드된 파일 목록
│   ├── SimplePDFViewer.tsx      # PDF 미리보기 뷰어
│   ├── PDFProcessor.tsx         # PDF 페이지 분할 처리 로직
│   ├── ProcessingStatus.tsx     # 처리 진행 상태 UI (기본)
│   ├── DetailedProgress.tsx     # 상세 진행 상태 UI (Phase 2)
│   ├── DownloadManager.tsx      # 개별/일괄 다운로드 관리
│   ├── PagePreview.tsx          # 페이지 미리보기 카드 (Phase 2)
│   ├── PreviewGrid.tsx          # 썸네일 그리드 뷰 (Phase 2)
│   └── ThemeToggle.tsx          # 다크 모드 토글 (Phase 2)
│
├── contexts/                    # React Context
│   └── ThemeContext.tsx         # 테마 관리 Context (Phase 2)
│
├── hooks/                       # Custom Hooks
│   ├── useProgress.ts           # 진행 상태 관리 Hook (Phase 2)
│   └── usePageSelection.ts      # 페이지 선택 관리 Hook (Phase 3)
│
├── lib/                         # 유틸리티 라이브러리
│   ├── pdf/
│   │   ├── splitter.ts         # PDFSplitter 클래스 (pdf-lib 래퍼)
│   │   ├── validator.ts        # PDF 파일 검증 로직
│   │   ├── renderer.ts         # PDF 렌더링 (썸네일 생성, Phase 2)
│   │   └── merger.ts           # PDF 병합 (Phase 3)
│   └── utils/
│       └── download.ts         # 파일 다운로드 유틸리티
│
├── types/                       # TypeScript 타입 정의
│   └── pdf.ts                  # ProcessedPage, PDFProcessorState 등
│
├── public/                      # 정적 파일
│   ├── index.html
│   ├── css/
│   └── js/
│
├── package.json                 # 프로젝트 의존성
├── tsconfig.json               # TypeScript 설정
├── init.md                     # PRD (Product Requirements Document)
└── init-execution-plan.md      # 실행 계획
```

---

## 아키텍처 다이어그램

```
┌─────────────────────────────────────────────────────────────┐
│                        사용자 브라우저                          │
├─────────────────────────────────────────────────────────────┤
│                    Next.js App (React 19)                    │
├──────────────────────┬──────────────────────────────────────┤
│   Pages/Routes       │   Components Layer                    │
│                      │                                       │
│  • app/page.tsx      │  • DragDropUpload    (업로드 UI)      │
│    - Main UI         │  • FileList          (파일 목록)      │
│    - State Mgmt      │  • SimplePDFViewer   (뷰어)          │
│    - ThemeToggle     │  • PDFProcessor      (분할 처리)      │
│                      │  • DetailedProgress  (진행 상태)      │
│  • app/api/          │  • DownloadManager   (다운로드)       │
│    - upload          │  • PreviewGrid       (썸네일 그리드)  │
│    - files           │  • PagePreview       (썸네일 카드)    │
│    - files/[name]    │  • ThemeToggle       (다크 모드)      │
├──────────────────────┴──────────────────────────────────────┤
│                      Business Logic Layer                    │
│                                                              │
│  lib/pdf/                       lib/utils/                  │
│  • PDFSplitter                  • download                  │
│    - loadPDF()                  • File save helpers         │
│    - splitPages()                                           │
│    - createSinglePagePDF()                                  │
│  • PDFRenderer (Phase 2)       hooks/                      │
│    - renderPage()               • useProgress               │
│    - generateThumbnail()        • useTheme                  │
│    - generateAllThumbnails()                                │
│  • validator                    contexts/                   │
│    - File validation            • ThemeContext              │
├─────────────────────────────────────────────────────────────┤
│                    External Libraries                        │
│                                                              │
│  • pdf-lib          (PDF 생성/조작)                         │
│  • pdfjs-dist       (PDF 렌더링/미리보기)                    │
│  • jszip            (다중 파일 압축)                         │
│  • file-saver       (파일 다운로드)                          │
│  • formidable       (서버 파일 업로드)                       │
└─────────────────────────────────────────────────────────────┘
```

---

## 데이터 플로우

### 1. PDF 업로드 플로우

```
사용자 파일 선택/드롭
    ↓
DragDropUpload 컴포넌트
    ↓
handleUpload(file: File)
    ↓
POST /api/upload (FormData)
    ↓
formidable 파일 저장
    ↓
서버: /uploads 디렉토리 저장
    ↓
Response: { file: PDFFile }
    ↓
클라이언트: setSelectedFile()
    ↓
SimplePDFViewer로 미리보기
```

### 2. PDF 분할 플로우

```
사용자 "Split" 버튼 클릭
    ↓
handleSplitAnother(file)
    ↓
fetch file.url → Blob → File
    ↓
setCurrentProcessingFile(file)
setShowSplitView(true)
    ↓
PDFProcessor 컴포넌트 실행
    ↓
PDFSplitter.loadPDF(file)
    ↓
PDFSplitter.splitPages(pdfDoc)
    ├─ for each page:
    │   ├─ PDFDocument.create()
    │   ├─ copyPages([pageIndex])
    │   ├─ newPdf.save() → Uint8Array
    │   └─ onProgress(%) 콜백
    ↓
onProcessComplete(pages: ProcessedPage[])
    ↓
setProcessedPages(pages)
    ↓
DownloadManager 활성화
```

### 3. 다운로드 플로우

```
사용자 다운로드 선택
    ├─ 개별 페이지 다운로드
    │   ↓
    │   downloadSinglePage(page)
    │   ↓
    │   new Blob([page.data])
    │   ↓
    │   file-saver.saveAs()
    │
    └─ 전체 ZIP 다운로드
        ↓
        downloadAllAsZip()
        ↓
        JSZip.create()
        ↓
        for each page: zip.file(name, data)
        ↓
        zip.generateAsync({ type: 'blob' })
        ↓
        file-saver.saveAs()
```

---

## 주요 컴포넌트 설명

### 1. `app/page.tsx` (메인 페이지)

**역할**: 전체 애플리케이션의 상태 관리 및 뷰 전환

**주요 State**:
- `files`: 업로드된 PDF 파일 목록
- `selectedFile`: 현재 선택된 PDF
- `currentProcessingFile`: 분할 중인 PDF File 객체
- `processingState`: 처리 진행 상태 (idle/loading/processing/complete/error)
- `processedPages`: 분할된 페이지 데이터 배열
- `showSplitView`: 분할 뷰 표시 여부

**주요 함수**:
- `handleUpload()`: 파일 업로드 및 자동 분할 시작
- `handleDelete()`: 파일 삭제
- `handleProcessComplete()`: 분할 완료 시 처리
- `handleSplitAnother()`: 기존 파일 재분할
- `handleBackToUpload()`: 업로드 화면으로 돌아가기

**뷰 전환**:
- `showSplitView === false`: 업로드 + 파일 목록 + 뷰어
- `showSplitView === true`: 분할 진행 상황 + 다운로드 관리

### 2. `components/PDFProcessor.tsx`

**역할**: PDF 파일을 페이지별로 분할하는 핵심 비즈니스 로직

**Props**:
- `file`: 처리할 File 객체
- `onProcessComplete`: 완료 콜백
- `onError`: 에러 콜백
- `onStateChange`: 상태 업데이트 콜백

**동작 방식**:
1. `useEffect`로 file 변경 감지
2. `PDFSplitter` 인스턴스 생성
3. `loadPDF()` → `splitPages()` 순차 실행
4. 각 페이지 처리 시 `onProgress` 콜백으로 진행 상태 업데이트
5. 완료 시 `ProcessedPage[]` 배열 반환

### 3. `lib/pdf/splitter.ts` (PDFSplitter 클래스)

**역할**: pdf-lib 래퍼 클래스, PDF 처리 로직 캡슐화

**주요 메서드**:

```typescript
class PDFSplitter {
  // PDF 파일 로드
  async loadPDF(file: File): Promise<PDFDocument>

  // 모든 페이지 분할
  async splitPages(
    pdfDoc: PDFDocument,
    originalFileName: string
  ): Promise<ProcessedPage[]>

  // 단일 페이지 추출
  async createSinglePagePDF(
    pdfDoc: PDFDocument,
    pageIndex: number
  ): Promise<Uint8Array>

  // 파일명 생성 (예: document_page_001.pdf)
  private generateFileName(
    originalFileName: string,
    pageNumber: number
  ): string
}
```

**처리 흐름**:
- File → ArrayBuffer → PDFDocument (pdf-lib)
- for each page:
  - 새 PDFDocument 생성
  - 원본에서 해당 페이지 복사
  - Uint8Array로 저장
  - ProcessedPage 객체 생성

### 4. `components/DownloadManager.tsx`

**역할**: 분할된 페이지 다운로드 관리

**Props**:
- `pages`: ProcessedPage[]
- `originalFileName`: 원본 파일명

**기능**:
- 개별 페이지 다운로드 (file-saver)
- 전체 페이지 ZIP 다운로드 (jszip + file-saver)
- 다운로드 진행 상태 표시
- **그리드/리스트 뷰 전환** (Phase 2)

### 5. `lib/pdf/renderer.ts` (PDFRenderer 클래스) - Phase 2

**역할**: PDF.js를 사용하여 PDF 페이지를 이미지로 렌더링

**주요 메서드**:

```typescript
class PDFRenderer {
  // PDF.js 동적 로드 (클라이언트 전용)
  private async ensurePdfjs(): Promise<any>

  // PDF 페이지를 이미지로 렌더링
  async renderPage(
    pdfData: Uint8Array,
    pageNum: number,
    options?: RenderOptions
  ): Promise<string>

  // 썸네일 생성 (200x200px 기본)
  async generateThumbnail(
    pdfData: Uint8Array,
    pageNum: number,
    size?: number
  ): Promise<string>

  // 모든 페이지 썸네일 일괄 생성
  async generateAllThumbnails(
    pdfData: Uint8Array,
    size?: number,
    onProgress?: (current: number, total: number) => void
  ): Promise<string[]>
}
```

**특징**:
- 클라이언트 사이드 전용 (SSR 방지)
- Canvas 기반 렌더링
- Base64 이미지 반환
- 진행 상태 콜백 지원

### 6. `components/PreviewGrid.tsx` - Phase 2

**역할**: 페이지 썸네일 그리드 표시

**Props**:
- `pages`: ProcessedPage[]
- `selectedPages`: number[]
- `onPageSelect`: (pageNumber: number) => void
- `thumbnailSize`: number (기본 200px)

**기능**:
- 썸네일 자동 생성 및 캐싱
- 반응형 그리드 레이아웃 (2-6열)
- 페이지 선택/해제
- 전체 선택/해제
- 로딩 진행 상태 표시

### 7. `components/PagePreview.tsx` - Phase 2

**역할**: 개별 페이지 썸네일 카드

**Props**:
- `pageData`: Uint8Array
- `pageNumber`: number
- `thumbnail`: string (Base64 이미지)
- `isSelected`: boolean
- `onSelect`: () => void

**특징**:
- 선택 상태 시각적 표시 (링 효과)
- 로딩/에러 상태 처리
- 호버 효과

### 8. `hooks/useProgress.ts` - Phase 2

**역할**: 진행 상태 관리 및 통계 계산

**제공 데이터**:
```typescript
interface ProgressData {
  currentPage: number
  totalPages: number
  currentStep: 'idle' | 'loading' | 'processing' | 'generating' | 'complete'
  elapsedTime: number
  estimatedTimeRemaining: number
  processedSize: number
  totalSize: number
  speed: number // pages per second
}
```

**제공 함수**:
- `updateProgress()`: 진행 상태 업데이트
- `reset()`: 상태 초기화
- `getProgressPercentage()`: 퍼센트 계산
- `formatTime()`: 시간 포맷팅
- `getStepLabel()`: 단계 레이블

### 9. `components/DetailedProgress.tsx` - Phase 2

**역할**: 상세 진행 상태 표시

**기능**:
- 4단계 진행 상태 (loading → processing → generating → complete)
- 실시간 통계 (현재 페이지, 경과 시간, 처리 속도, 예상 시간)
- 그라디언트 프로그레스 바
- 단계별 아이콘 및 상태 표시

### 10. `contexts/ThemeContext.tsx` - Phase 2

**역할**: 테마 관리 Context

**지원 테마**:
- `light`: 라이트 모드
- `dark`: 다크 모드
- `system`: 시스템 설정 자동 감지

**기능**:
- 시스템 테마 자동 감지 (`prefers-color-scheme`)
- 로컬 스토리지 저장
- 실시간 테마 전환
- 메타 테마 색상 업데이트

### 11. `components/ThemeToggle.tsx` - Phase 2

**역할**: 테마 전환 토글 버튼

**기능**:
- 클릭 시 light → dark → system 순환
- 현재 테마 아이콘 표시
- 툴팁 지원

---

## API 엔드포인트

### `POST /api/upload`

**설명**: PDF 파일 업로드

**Request**:
- Content-Type: `multipart/form-data`
- Field: `pdf` (File)

**Response**:
```json
{
  "file": {
    "filename": "1738234567890-document.pdf",
    "originalName": "document.pdf",
    "url": "/uploads/1738234567890-document.pdf",
    "size": 123456,
    "uploadedAt": "2025-09-30T12:34:56.789Z"
  }
}
```

### `GET /api/files`

**설명**: 업로드된 파일 목록 조회

**Response**:
```json
{
  "files": [
    {
      "filename": "1738234567890-document.pdf",
      "originalName": "document.pdf",
      "url": "/uploads/1738234567890-document.pdf",
      "size": 123456,
      "uploadedAt": "2025-09-30T12:34:56.789Z"
    }
  ]
}
```

### `GET /api/files/[filename]`

**설명**: 특정 파일 다운로드

**Response**: PDF 파일 스트림 (Content-Type: application/pdf)

### `DELETE /api/files/[filename]`

**설명**: 파일 삭제

**Response**:
```json
{
  "success": true
}
```

---

## 타입 시스템

### `types/pdf.ts`

```typescript
// 분할된 페이지 데이터
export interface ProcessedPage {
  pageNumber: number          // 페이지 번호 (1-based)
  data: Uint8Array           // PDF 바이너리 데이터
  fileName: string           // 생성된 파일명
  size: number              // 파일 크기 (bytes)
}

// PDF 처리 상태
export interface PDFProcessorState {
  status: 'idle' | 'loading' | 'processing' | 'complete' | 'error'
  currentPage: number        // 현재 처리 중인 페이지
  totalPages: number         // 전체 페이지 수
  progress: number          // 진행률 (0-100)
  error?: string            // 에러 메시지
  pages?: ProcessedPage[]   // 처리 완료된 페이지
}

// 다운로드 옵션
export interface DownloadOptions {
  format: 'individual' | 'zip'
  prefix?: string
  includePageNumbers?: boolean
}

// 파일 메타데이터
export interface PDFFile {
  filename: string           // 서버 저장 파일명
  originalName?: string      // 원본 파일명
  url: string               // 다운로드 URL
  size: number              // 파일 크기
  uploadedAt?: string | Date // 업로드 시간
}
```

---

## 상태 관리 패턴

### 컴포넌트 트리 및 Props Drilling

```
App (page.tsx)
├─ State: files, selectedFile, processingState, processedPages
│
├─ DragDropUpload
│  └─ onUpload(file) → handleUpload()
│
├─ FileList
│  ├─ onSelect(file) → setSelectedFile()
│  ├─ onDelete(filename) → handleDelete()
│  └─ onSplit(file) → handleSplitAnother()
│
├─ SimplePDFViewer
│  └─ file={selectedFile}
│
├─ PDFProcessor (hidden)
│  ├─ file={currentProcessingFile}
│  ├─ onStateChange={setProcessingState}
│  ├─ onProcessComplete={handleProcessComplete}
│  └─ onError={handleProcessError}
│
├─ ProcessingStatus
│  └─ state={processingState}
│
└─ DownloadManager
   ├─ pages={processedPages}
   └─ originalFileName={currentProcessingFile?.name}
```

**특징**:
- 단일 페이지 애플리케이션으로 상태가 `page.tsx`에 집중
- Props Drilling 방식 사용 (복잡도가 낮아 Context API 불필요)
- 각 컴포넌트는 단일 책임 원칙 준수

---

## 성능 최적화 전략

### 1. 클라이언트 사이드 처리
- PDF 분할을 브라우저에서 수행하여 서버 부하 최소화
- 네트워크 지연 없음

### 2. 메모리 관리
- 분할된 페이지는 Uint8Array로 메모리 보관
- 사용자가 뷰 전환 시 `setProcessedPages([])` 로 메모리 해제

### 3. 비동기 처리
- `async/await` 패턴으로 UI 블로킹 방지
- 진행 상태를 실시간으로 업데이트하여 UX 개선

### 4. 파일 크기 제한
- 최대 100MB (브라우저 메모리 고려)
- 초과 시 에러 메시지 표시

---

## 보안 고려사항

### 1. 클라이언트 사이드 처리
- PDF 내용이 서버에 전송되지 않음 (업로드 파일 제외)
- 분할 처리는 100% 브라우저 메모리에서 수행

### 2. 파일 검증
- `lib/pdf/validator.ts` 에서 MIME 타입 검증
- 파일 확장자 검증
- 최대 크기 제한

### 3. XSS 방어
- Next.js의 기본 XSS 방어 기능 활용
- 사용자 입력 파일명 sanitize

### 4. CORS
- API Routes는 동일 도메인에서만 접근 가능
- 필요 시 CORS 헤더 추가

---

## 배포 및 환경 설정

### 개발 환경
```bash
npm run dev
# http://localhost:3000
```

### 프로덕션 빌드
```bash
npm run build
npm start
```

### 환경 변수 (`.env.local`)
```env
NEXT_PUBLIC_MAX_FILE_SIZE=104857600  # 100MB
UPLOAD_DIR=./uploads
```

### 정적 파일 서빙
- `public/uploads/` → `/uploads/` 경로로 접근
- Next.js 자동 정적 파일 서빙

---

## 개발 현황

### Phase 1 (MVP) ✅ 완료
- ✅ PDF 업로드 및 분할 기능
- ✅ 개별/일괄 다운로드
- ✅ 기본 진행 상태 표시
- ✅ 파일 관리 시스템

### Phase 2 (사용자 경험 개선) ✅ 완료
- ✅ 페이지 썸네일 미리보기 그리드
- ✅ 상세 진행 상태 표시 (시간, 속도, 예상 시간)
- ✅ 다크 모드 지원 (light/dark/system)
- ✅ 그리드/리스트 뷰 전환
- ✅ 애니메이션 및 전환 효과

### Phase 3 (고급 기능) ✅ 완료 (부분)
- ✅ 선택적 페이지 분할 (범위 선택, Shift/Ctrl 키)
- ✅ PDF 병합 기능 (선택한 페이지 병합)
- ✅ 고급 선택 툴바 (짝수/홀수, 범위 입력, 반전)
- ⏳ 페이지 순서 변경 (Drag & Drop) - 미구현
- ⏳ 다국어 지원 (i18n) - 미구현

## 확장 가능성

### 아키텍처 개선 방향
- **상태 관리**: Zustand 또는 Jotai 도입 (복잡도 증가 시)
- **에러 처리**: Sentry 통합
- **성능 모니터링**: Next.js Analytics
- **테스트**: Jest + React Testing Library
- **PWA 지원**: Service Worker, Offline 모드

---

## 트러블슈팅 가이드

### PDF 처리 실패
**증상**: "Failed to load PDF file" 에러
**원인**: 손상된 PDF 또는 비표준 PDF
**해결**: pdf-lib이 지원하지 않는 PDF 형식, 다른 PDF로 테스트

### 메모리 부족
**증상**: 대용량 파일 처리 시 브라우저 크래시
**원인**: 브라우저 메모리 한계 초과
**해결**:
- 파일 크기 제한 강화
- Web Worker로 백그라운드 처리
- 청크 단위 처리 구현

### 다운로드 실패
**증상**: ZIP 다운로드 시 파일 손상
**원인**: jszip 생성 오류
**해결**:
- Blob 생성 옵션 확인
- 브라우저 콘솔 에러 로그 확인

### PDF.js SSR 에러 (Phase 2)
**증상**: `TypeError: Object.defineProperty called on non-object`
**원인**: pdfjs-dist가 서버 사이드에서 실행 시도
**해결**:
- `PDFRenderer.ensurePdfjs()` 메서드로 동적 import
- `typeof window !== 'undefined'` 체크
- 컴포넌트를 `'use client'`로 마크

### 썸네일 생성 실패
**증상**: 썸네일이 표시되지 않거나 빈 이미지
**원인**: Canvas 렌더링 실패 또는 PDF 데이터 손상
**해결**:
- 브라우저 콘솔에서 에러 확인
- PDF.js Worker URL 확인 (CDN 접근 가능 여부)
- Canvas 크기 제한 확인

### 다크 모드가 적용되지 않음
**증상**: 테마 전환 시 색상 변경 없음
**원인**: Tailwind CSS 다크 모드 설정 누락
**해결**:
- `tailwind.config.js`에 `darkMode: 'class'` 추가
- HTML 루트에 `dark` 클래스 적용 확인
- CSS 캐시 클리어 후 재시작

---

## 참고 문서

- [Next.js Documentation](https://nextjs.org/docs)
- [pdf-lib Documentation](https://pdf-lib.js.org/)
- [pdfjs-dist Documentation](https://mozilla.github.io/pdf.js/)
- [JSZip Documentation](https://stuk.github.io/jszip/)
- [TypeScript Documentation](https://www.typescriptlang.org/)

---

## 변경 이력

### v3.0 (2025-09-30)
- Phase 3 완료 (부분): 선택적 페이지 처리, PDF 병합
- 새 컴포넌트: SelectionToolbar
- 새 라이브러리: PDFMerger (병합 기능)
- 새 Hook: usePageSelection (Shift/Ctrl 선택 지원)
- 고급 선택 기능: 짝수/홀수, 범위 입력, 반전 선택
- 병합 기능: 선택한 페이지를 하나의 PDF로 병합

### v2.0 (2025-09-30)
- Phase 2 완료: 미리보기, 진행 상태 개선, 다크 모드
- 새 컴포넌트 추가: PreviewGrid, PagePreview, DetailedProgress, ThemeToggle
- 새 라이브러리: PDFRenderer (PDF.js 통합)
- 새 Hook: useProgress
- 새 Context: ThemeContext
- 트러블슈팅 가이드 업데이트

### v1.0 (2025-09-28)
- Phase 1 완료: MVP 기본 기능
- PDF 업로드, 분할, 다운로드 기능

---

**문서 버전**: 3.0
**최종 업데이트**: 2025-09-30
**작성자**: AI Assistant