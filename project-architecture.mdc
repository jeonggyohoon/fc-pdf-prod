---
alwaysApply: true
tags: [architecture, guidelines, typescript, nextjs]
---

# PDF Page Splitter - Project Architecture

## 프로젝트 개요

**PDF Page Splitter**는 사용자가 PDF 파일을 업로드하여 각 페이지를 독립적인 PDF 파일로 분할할 수 있는 웹 애플리케이션입니다.

### 핵심 가치
- **프라이버시 보장**: 클라이언트 사이드 처리로 서버 전송 최소화
- **빠른 처리**: 로컬 처리로 즉시 결과 제공
- **간편한 사용**: 드래그 앤 드롭 인터페이스

---

## 기술 스택

### Frontend
- **Framework**: Next.js 15 (React 19)
- **Language**: TypeScript
- **Styling**: Tailwind CSS
- **PDF Processing**: pdf-lib, pdfjs-dist
- **File Handling**: file-saver, jszip

### Backend
- **Runtime**: Node.js
- **Framework**: Next.js API Routes
- **File Upload**: formidable
- **Server**: Express (optional)

---

## 프로젝트 구조

```
D:\project\PDF\
├── app/                          # Next.js App Router
│   ├── layout.tsx               # Root layout (메타데이터, 폰트, 다크모드 설정)
│   ├── page.tsx                 # 메인 페이지 (3단계 상태: idle/processing/complete)
│   └── globals.css              # 전역 스타일 (Tailwind + 다크모드 CSS 변수)
│
├── components/                   # React 컴포넌트
│   ├── DragDropUpload.tsx       # 드래그 앤 드롭 업로드 UI
│   ├── PDFProcessor.tsx         # PDF 페이지 분할 처리 로직
│   ├── ProcessingView.tsx       # 처리 진행 상태 UI
│   ├── ResultView.tsx           # 결과 화면 (다운로드 버튼, 그리드)
│   ├── PagePreview.tsx          # 페이지 미리보기 카드
│   ├── PreviewGrid.tsx          # 썸네일 그리드 뷰
│   ├── ThemeToggle.tsx          # 다크/라이트 모드 토글 버튼
│   └── ui/                      # shadcn/ui 컴포넌트
│       ├── button.tsx           # 버튼 (outline/default/secondary 변형)
│       ├── card.tsx             # 카드
│       ├── progress.tsx         # 프로그레스 바
│       ├── badge.tsx            # 뱃지
│       └── alert.tsx            # 알림
│
├── hooks/                       # Custom Hooks
│   ├── useProgress.ts           # 진행 상태 관리 Hook
│   └── useTheme.ts              # 테마 상태 관리 Hook (localStorage 연동)
│
├── lib/                         # 유틸리티 라이브러리
│   ├── pdf/
│   │   ├── splitter.ts         # PDFSplitter 클래스 (pdf-lib 래퍼)
│   │   ├── validator.ts        # PDF 파일 검증 로직
│   │   ├── renderer.ts         # PDF 렌더링 (썸네일 생성)
│   │   └── merger.ts           # PDF 병합 기능
│   ├── utils/
│   │   └── download.ts         # 파일 다운로드 유틸리티
│   └── utils.ts                # 공통 유틸리티 (cn 함수 등)
│
├── types/                       # TypeScript 타입 정의
│   └── pdf.ts                  # ProcessedPage, PDFProcessorState 등
│
├── public/                      # 정적 파일 (현재 미사용)
│
├── package.json                 # 프로젝트 의존성
├── tsconfig.json               # TypeScript 설정
├── tailwind.config.js          # Tailwind CSS 설정 (darkMode: 'class')
├── components.json             # shadcn/ui 설정
├── next.config.js              # Next.js 설정
├── init.md                     # PRD (Product Requirements Document)
├── init-execution-plan.md      # 실행 계획
└── project-architecture.mdc    # 프로젝트 아키텍처 문서 (본 문서)
```

---

## 아키텍처 다이어그램

```
┌─────────────────────────────────────────────────────────────┐
│                        사용자 브라우저                          │
├─────────────────────────────────────────────────────────────┤
│                    Next.js App (React 19)                    │
├──────────────────────┬──────────────────────────────────────┤
│   Pages/Routes       │   Components Layer                    │
│                      │                                       │
│  • app/page.tsx      │  • DragDropUpload    (업로드 UI)      │
│    - Main UI         │  • PDFProcessor      (분할 처리)      │
│    - State Mgmt      │  • ProcessingView    (진행 상태)      │
│    - ThemeToggle     │  • ResultView        (결과 화면)      │
│                      │  • PreviewGrid       (썸네일 그리드)  │
│  • app/layout.tsx    │  • PagePreview       (썸네일 카드)    │
│    - Dark mode       │  • ThemeToggle       (다크 모드)      │
│    - Metadata        │  • ui/*              (shadcn/ui)     │
│                      │                                       │
│  • app/globals.css   │                                       │
│    - Tailwind        │                                       │
│    - Dark variables  │                                       │
├──────────────────────┴──────────────────────────────────────┤
│                      Business Logic Layer                    │
│                                                              │
│  lib/pdf/                       lib/utils/                  │
│  • PDFSplitter                  • download                  │
│    - loadPDF()                  • File save helpers         │
│    - splitPages()               • utils.ts (cn 함수)        │
│    - createSinglePagePDF()                                  │
│  • PDFRenderer                  hooks/                      │
│    - renderPage()               • useProgress               │
│    - generateThumbnail()        • useTheme                  │
│    - generateAllThumbnails()      (localStorage 연동)       │
│  • PDFMerger                                                │
│    - mergePages()                                           │
│  • validator                                                │
│    - File validation                                        │
├─────────────────────────────────────────────────────────────┤
│                    External Libraries                        │
│                                                              │
│  • pdf-lib          (PDF 생성/조작)                         │
│  • pdfjs-dist       (PDF 렌더링/미리보기)                    │
│  • jszip            (다중 파일 압축)                         │
│  • file-saver       (파일 다운로드)                          │
│  • lucide-react     (아이콘)                                │
│  • tailwindcss      (스타일링)                              │
│  • class-variance-authority (버튼 변형)                     │
└─────────────────────────────────────────────────────────────┘
```

---

## 데이터 플로우

### 1. PDF 업로드 플로우 (클라이언트 전용)

```
사용자 파일 선택/드롭
    ↓
DragDropUpload 컴포넌트
    ↓
handleFileUpload(file: File)
    ↓
page.tsx: setCurrentFile(file)
page.tsx: setAppState('processing')
    ↓
PDFProcessor 컴포넌트 마운트
    ↓
자동으로 분할 시작
```

### 2. PDF 분할 플로우

```
PDFProcessor 컴포넌트 실행
    ↓
PDFSplitter.loadPDF(file)
    ↓
상태: 'loading' → onStateChange 콜백
    ↓
PDFSplitter.splitPages(pdfDoc, fileName)
    ├─ for each page:
    │   ├─ PDFDocument.create()
    │   ├─ copyPages([pageIndex])
    │   ├─ newPdf.save() → Uint8Array
    │   └─ onProgress(%) 콜백 → 'processing' 상태
    ↓
onProcessComplete(pages: ProcessedPage[])
    ↓
page.tsx: setProcessedPages(pages)
page.tsx: setAppState('complete')
    ↓
ResultView 표시
    ↓
PreviewGrid에서 썸네일 렌더링 시작
```

### 3. 썸네일 렌더링 플로우

```
PreviewGrid 마운트
    ↓
각 PagePreview에서 useEffect 실행
    ↓
PDFRenderer.generateThumbnail(page.data, 1, 200)
    ↓
PDF.js 동적 로드 (클라이언트 전용)
    ↓
Canvas에 렌더링
    ↓
Base64 이미지 생성
    ↓
<img src={thumbnail} /> 표시
```

### 4. 다운로드 플로우

```
사용자 다운로드 선택
    ├─ 개별 페이지 다운로드 (PagePreview)
    │   ↓
    │   handleDownload(page)
    │   ↓
    │   new Blob([page.data])
    │   ↓
    │   file-saver.saveAs(blob, fileName)
    │
    └─ 전체 ZIP 다운로드 (ResultView)
        ↓
        handleDownloadAll()
        ↓
        JSZip.create()
        ↓
        for each page: zip.file(page.fileName, page.data)
        ↓
        zip.generateAsync({ type: 'blob' })
        ↓
        file-saver.saveAs(zipBlob, `${baseName}_split.zip`)
```

### 5. 테마 전환 플로우

```
사용자 ThemeToggle 클릭
    ↓
useTheme.toggleTheme()
    ↓
newTheme = theme === 'dark' ? 'light' : 'dark'
    ↓
localStorage.setItem('theme', newTheme)
    ↓
document.documentElement.classList.toggle('dark')
    ↓
CSS 변수 자동 전환 (.dark 클래스)
    ↓
모든 컴포넌트 색상 업데이트
```

---

## 주요 컴포넌트 설명

### 1. `app/page.tsx` (메인 페이지)

**역할**: 전체 애플리케이션의 상태 관리 및 뷰 전환

**주요 State**:
- `appState`: 'idle' | 'processing' | 'complete' (3단계 상태)
- `currentFile`: 현재 처리 중인 File 객체
- `processedPages`: 분할된 페이지 데이터 배열
- `processingState`: 처리 진행 상태 (PDFProcessorState)

**주요 함수**:
- `handleFileUpload(file)`: 파일 업로드 및 자동 분할 시작
- `handleProcessComplete(pages)`: 분할 완료 시 처리
- `handleProcessError(error)`: 에러 처리
- `handleReset()`: 초기 상태로 리셋

**뷰 전환**:
- `appState === 'idle'`: DragDropUpload (업로드 화면)
- `appState === 'processing'`: ProcessingView (진행 상태)
- `appState === 'complete'`: ResultView (결과 + 다운로드)

### 2. `components/PDFProcessor.tsx`

**역할**: PDF 파일을 페이지별로 분할하는 핵심 비즈니스 로직

**Props**:
- `file`: 처리할 File 객체
- `onProcessComplete`: 완료 콜백
- `onError`: 에러 콜백
- `onStateChange`: 상태 업데이트 콜백

**동작 방식**:
1. `useEffect`로 file 변경 감지
2. `PDFSplitter` 인스턴스 생성
3. `loadPDF()` → `splitPages()` 순차 실행
4. 각 페이지 처리 시 `onProgress` 콜백으로 진행 상태 업데이트
5. 완료 시 `ProcessedPage[]` 배열 반환

### 3. `lib/pdf/splitter.ts` (PDFSplitter 클래스)

**역할**: pdf-lib 래퍼 클래스, PDF 처리 로직 캡슐화

**주요 메서드**:

```typescript
class PDFSplitter {
  // PDF 파일 로드
  async loadPDF(file: File): Promise<PDFDocument>

  // 모든 페이지 분할
  async splitPages(
    pdfDoc: PDFDocument,
    originalFileName: string
  ): Promise<ProcessedPage[]>

  // 단일 페이지 추출
  async createSinglePagePDF(
    pdfDoc: PDFDocument,
    pageIndex: number
  ): Promise<Uint8Array>

  // 파일명 생성 (예: document_page_001.pdf)
  private generateFileName(
    originalFileName: string,
    pageNumber: number
  ): string
}
```

**처리 흐름**:
- File → ArrayBuffer → PDFDocument (pdf-lib)
- for each page:
  - 새 PDFDocument 생성
  - 원본에서 해당 페이지 복사
  - Uint8Array로 저장
  - ProcessedPage 객체 생성

### 4. `components/ResultView.tsx`

**역할**: 분할 완료 후 결과 화면 표시

**Props**:
- `pages`: ProcessedPage[]
- `originalFileName`: 원본 파일명
- `onReset`: 초기 화면으로 돌아가기 콜백

**기능**:
- 성공 알림 (Alert)
- Download All (ZIP) 버튼
- Split Another 버튼 (새 파일 업로드)
- PreviewGrid 렌더링

### 5. `components/PreviewGrid.tsx`

**역할**: 페이지 썸네일 그리드 표시

**Props**:
- `pages`: ProcessedPage[]

**기능**:
- 반응형 그리드 레이아웃 (grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6)
- PagePreview 컴포넌트 렌더링
- 자동 스크롤

### 6. `components/PagePreview.tsx`

**역할**: 개별 페이지 썸네일 카드

**Props**:
- `page`: ProcessedPage
- `thumbnail?`: string (Base64 이미지, 옵셔널)

**기능**:
- 썸네일 자동 생성 (useEffect + PDFRenderer)
- Download 버튼 (개별 페이지 다운로드)
- 페이지 번호 뱃지
- 로딩 스피너

### 7. `components/ThemeToggle.tsx`

**역할**: 다크/라이트 모드 전환 토글 버튼

**기능**:
- 우측 상단 고정 (fixed top-4 right-4)
- 아이콘 자동 전환 (Sun ↔ Moon)
- useTheme 훅 사용

### 8. `lib/pdf/renderer.ts` (PDFRenderer 클래스)

**역할**: PDF.js를 사용하여 PDF 페이지를 이미지로 렌더링

**주요 메서드**:

```typescript
class PDFRenderer {
  // PDF.js 동적 로드 (클라이언트 전용)
  private async ensurePdfjs(): Promise<any>

  // PDF 페이지를 이미지로 렌더링
  async renderPage(
    pdfData: Uint8Array,
    pageNum: number,
    options?: RenderOptions
  ): Promise<string>

  // 썸네일 생성 (200x200px 기본)
  async generateThumbnail(
    pdfData: Uint8Array,
    pageNum: number,
    size?: number
  ): Promise<string>

  // 모든 페이지 썸네일 일괄 생성
  async generateAllThumbnails(
    pdfData: Uint8Array,
    size?: number,
    onProgress?: (current: number, total: number) => void
  ): Promise<string[]>
}
```

**특징**:
- 클라이언트 사이드 전용 (SSR 방지)
- Canvas 기반 렌더링
- Base64 이미지 반환
- 진행 상태 콜백 지원

### 9. `hooks/useProgress.ts`

**역할**: 진행 상태 관리 및 통계 계산

**제공 데이터**:
```typescript
interface ProgressData {
  currentPage: number
  totalPages: number
  currentStep: 'idle' | 'loading' | 'processing' | 'generating' | 'complete'
  elapsedTime: number
  estimatedTimeRemaining: number
  processedSize: number
  totalSize: number
  speed: number // pages per second
}
```

**제공 함수**:
- `updateProgress()`: 진행 상태 업데이트
- `reset()`: 상태 초기화
- `getProgressPercentage()`: 퍼센트 계산
- `formatTime()`: 시간 포맷팅
- `getStepLabel()`: 단계 레이블

### 10. `hooks/useTheme.ts`

**역할**: 테마 상태 관리 Hook

**지원 테마**:
- `light`: 라이트 모드
- `dark`: 다크 모드

**기능**:
- localStorage에 테마 저장
- `toggleTheme()`: 테마 전환 함수
- `document.documentElement.classList.toggle('dark')` 자동 적용
- 페이지 로드 시 저장된 테마 복원

**반환값**:
```typescript
{
  theme: 'light' | 'dark',
  toggleTheme: () => void
}
```

### 11. `components/ProcessingView.tsx`

**역할**: 처리 진행 상태 표시

**Props**:
- `state`: PDFProcessorState
- `fileName`: string

**기능**:
- 진행 상태 표시 (로딩/처리 중)
- Progress 바
- 현재 페이지/전체 페이지 표시
- 파일명 표시

---

## API 엔드포인트

**참고**: 현재 버전은 100% 클라이언트 사이드 처리로 API 엔드포인트를 사용하지 않습니다.

모든 PDF 처리는 브라우저에서 수행되며, 서버로 파일이 전송되지 않습니다.

---

## 타입 시스템

### `types/pdf.ts`

```typescript
// 분할된 페이지 데이터
export interface ProcessedPage {
  pageNumber: number          // 페이지 번호 (1-based)
  data: Uint8Array           // PDF 바이너리 데이터
  fileName: string           // 생성된 파일명
  size: number              // 파일 크기 (bytes)
}

// PDF 처리 상태
export interface PDFProcessorState {
  status: 'idle' | 'loading' | 'processing' | 'complete' | 'error'
  currentPage: number        // 현재 처리 중인 페이지
  totalPages: number         // 전체 페이지 수
  progress: number          // 진행률 (0-100)
  error?: string            // 에러 메시지
  pages?: ProcessedPage[]   // 처리 완료된 페이지
}

// 다운로드 옵션
export interface DownloadOptions {
  format: 'individual' | 'zip'
  prefix?: string
  includePageNumbers?: boolean
}

// 파일 메타데이터
export interface PDFFile {
  filename: string           // 서버 저장 파일명
  originalName?: string      // 원본 파일명
  url: string               // 다운로드 URL
  size: number              // 파일 크기
  uploadedAt?: string | Date // 업로드 시간
}
```

---

## 상태 관리 패턴

### 컴포넌트 트리 및 Props Drilling

```
App (page.tsx)
├─ State: appState, currentFile, processedPages, processingState
├─ ThemeToggle (고정 위치)
│
├─ [appState === 'idle']
│  └─ DragDropUpload
│     └─ onUpload(file) → handleFileUpload()
│
├─ [appState === 'processing']
│  ├─ ProcessingView
│  │  ├─ state={processingState}
│  │  └─ fileName={currentFile?.name}
│  │
│  └─ PDFProcessor (hidden, 실제 처리)
│     ├─ file={currentFile}
│     ├─ onStateChange={setProcessingState}
│     ├─ onProcessComplete={handleProcessComplete}
│     └─ onError={handleProcessError}
│
└─ [appState === 'complete']
   └─ ResultView
      ├─ pages={processedPages}
      ├─ originalFileName={currentFile?.name}
      ├─ onReset={handleReset}
      │
      └─ PreviewGrid
         └─ pages.map(page =>
            PagePreview
            ├─ page={page}
            └─ (썸네일 자동 생성)
         )
```

**특징**:
- 단일 페이지 애플리케이션 (SPA)
- 상태가 `page.tsx`에 집중 (단순한 Props Drilling)
- 3단계 상태 전환 (idle → processing → complete)
- Context API 불필요 (복잡도 낮음)
- 각 컴포넌트는 단일 책임 원칙 준수

---

## 성능 최적화 전략

### 1. 클라이언트 사이드 처리
- PDF 분할을 브라우저에서 수행하여 서버 부하 최소화
- 네트워크 지연 없음

### 2. 메모리 관리
- 분할된 페이지는 Uint8Array로 메모리 보관
- 사용자가 뷰 전환 시 `setProcessedPages([])` 로 메모리 해제

### 3. 비동기 처리
- `async/await` 패턴으로 UI 블로킹 방지
- 진행 상태를 실시간으로 업데이트하여 UX 개선

### 4. 파일 크기 제한
- 최대 100MB (브라우저 메모리 고려)
- 초과 시 에러 메시지 표시

---

## 보안 고려사항

### 1. 클라이언트 사이드 처리
- PDF 내용이 서버에 전송되지 않음 (업로드 파일 제외)
- 분할 처리는 100% 브라우저 메모리에서 수행

### 2. 파일 검증
- `lib/pdf/validator.ts` 에서 MIME 타입 검증
- 파일 확장자 검증
- 최대 크기 제한

### 3. XSS 방어
- Next.js의 기본 XSS 방어 기능 활용
- 사용자 입력 파일명 sanitize

### 4. CORS
- API Routes는 동일 도메인에서만 접근 가능
- 필요 시 CORS 헤더 추가

---

## 배포 및 환경 설정

### 개발 환경
```bash
npm run dev
# http://localhost:3000
```

### 프로덕션 빌드
```bash
npm run build
npm start
```

### 환경 변수 (`.env.local`)
```env
NEXT_PUBLIC_MAX_FILE_SIZE=104857600  # 100MB
UPLOAD_DIR=./uploads
```

### 정적 파일 서빙
- `public/uploads/` → `/uploads/` 경로로 접근
- Next.js 자동 정적 파일 서빙

---

## 개발 현황

### 현재 버전 특징

✅ **구현 완료**:
- PDF 드래그 앤 드롭 업로드
- 클라이언트 사이드 PDF 분할 (pdf-lib)
- 페이지 썸네일 미리보기 (pdfjs-dist)
- 개별 페이지 다운로드
- 전체 페이지 ZIP 다운로드 (jszip)
- 다크 모드 / 라이트 모드 전환 (localStorage 저장)
- 반응형 그리드 레이아웃
- 진행 상태 표시 (Progress bar)
- shadcn/ui 컴포넌트 시스템

📋 **향후 개선 가능 사항**:
- 페이지 선택 기능 (특정 페이지만 분할)
- 페이지 병합 기능
- 페이지 순서 변경 (Drag & Drop)
- 다국어 지원 (i18n)
- 상세 진행 통계 (시간, 속도)

## 확장 가능성

### 아키텍처 개선 방향
- **상태 관리**: Zustand 또는 Jotai 도입 (복잡도 증가 시)
- **에러 처리**: Sentry 통합
- **성능 모니터링**: Next.js Analytics
- **테스트**: Jest + React Testing Library
- **PWA 지원**: Service Worker, Offline 모드

---

## 트러블슈팅 가이드

### PDF 처리 실패
**증상**: "Failed to load PDF file" 에러
**원인**: 손상된 PDF 또는 비표준 PDF
**해결**: pdf-lib이 지원하지 않는 PDF 형식, 다른 PDF로 테스트

### 메모리 부족
**증상**: 대용량 파일 처리 시 브라우저 크래시
**원인**: 브라우저 메모리 한계 초과
**해결**:
- 파일 크기 제한 강화
- Web Worker로 백그라운드 처리
- 청크 단위 처리 구현

### 다운로드 실패
**증상**: ZIP 다운로드 시 파일 손상
**원인**: jszip 생성 오류
**해결**:
- Blob 생성 옵션 확인
- 브라우저 콘솔 에러 로그 확인

### PDF.js SSR 에러 (Phase 2)
**증상**: `TypeError: Object.defineProperty called on non-object`
**원인**: pdfjs-dist가 서버 사이드에서 실행 시도
**해결**:
- `PDFRenderer.ensurePdfjs()` 메서드로 동적 import
- `typeof window !== 'undefined'` 체크
- 컴포넌트를 `'use client'`로 마크

### 썸네일 생성 실패
**증상**: 썸네일이 표시되지 않거나 빈 이미지
**원인**: Canvas 렌더링 실패 또는 PDF 데이터 손상
**해결**:
- 브라우저 콘솔에서 에러 확인
- PDF.js Worker URL 확인 (CDN 접근 가능 여부)
- Canvas 크기 제한 확인

### 다크 모드가 적용되지 않음
**증상**: 테마 전환 시 색상 변경 없음
**원인**: Tailwind CSS 다크 모드 설정 누락
**해결**:
- `tailwind.config.js`에 `darkMode: 'class'` 추가
- HTML 루트에 `dark` 클래스 적용 확인
- CSS 캐시 클리어 후 재시작

---

## 참고 문서

- [Next.js Documentation](https://nextjs.org/docs)
- [pdf-lib Documentation](https://pdf-lib.js.org/)
- [pdfjs-dist Documentation](https://mozilla.github.io/pdf.js/)
- [JSZip Documentation](https://stuk.github.io/jszip/)
- [TypeScript Documentation](https://www.typescriptlang.org/)

---

## 변경 이력

### v2.5 (2025-10-02) - 현재 버전
- **다크 모드 구현**:
  - 전체 서비스 다크 모드 기본 적용
  - ThemeToggle 컴포넌트 추가 (우측 상단 고정)
  - useTheme Hook 구현 (localStorage 연동)
  - Tailwind CSS dark mode 설정 (class 기반)
  - globals.css 다크 모드 CSS 변수 정의
- **버튼 스타일 개선**:
  - outline 버튼 텍스트 색상 수정 (다크/라이트 모두 명확하게 표시)
  - 호버 상태 텍스트 색상 최적화
- **아키텍처 문서 업데이트**:
  - 프로젝트 구조 최신화
  - 컴포넌트 설명 업데이트
  - 데이터 플로우에 테마 전환 플로우 추가

### v2.0 (2025-09-30)
- shadcn/ui 컴포넌트 시스템 도입
- 썸네일 미리보기 그리드 구현
- PDFRenderer 클래스 구현 (pdfjs-dist)
- 3단계 상태 관리 (idle/processing/complete)
- 반응형 디자인

### v1.0 (2025-09-28)
- MVP 기본 기능
- PDF 업로드, 분할, 다운로드 기능
- 클라이언트 사이드 처리

---

**문서 버전**: 2.5
**최종 업데이트**: 2025-10-02
**작성자**: AI Assistant